generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(uuid())
  email            String           @unique
  passwordHash     String
  firstName        String
  lastName         String
  emailConfirmed   Boolean          @default(false)
  role             Role
  isFirstTimeLogin Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  activities       Activity[]
  mentorFeedback   MentorFeedback[]
  mentorReports    Report[]         @relation(name: "mentorReports")
  mentorRoles      Mentorship[]     @relation(name: "mentorRole")
  studentRoles     Mentorship[]     @relation(name: "studentRole")
  mentorActivities MentorActivity[] @relation(name: "UserMentorActivities")

  @@map("users")
}

model Activity {
  id        String           @id @default(uuid())
  studentId String
  date      DateTime
  timeSpent Int
  notes     String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  student   User             @relation(fields: [studentId], references: [id])
  feedback  MentorFeedback[]

  @@map("activities")
}

model MentorFeedback {
  id            String         @id @default(uuid())
  activityId    String
  mentorId      String
  status        FeedbackStatus
  feedbackNotes String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  activity      Activity       @relation(fields: [activityId], references: [id])
  mentor        User           @relation(fields: [mentorId], references: [id])

  @@map("mentorfeedback")
}

model Report {
  id          String   @id @default(uuid())
  mentorId    String
  reportData  Json
  status      ProcessStatus @default(pending)
  generatedAt DateTime @default(now())
  mentor      User     @relation(fields: [mentorId], references: [id], name: "mentorReports")

  @@map("reports")
}

model Mentorship {
  id        String @id @default(uuid())
  mentorId  String
  studentId String
  mentor    User   @relation(fields: [mentorId], references: [id], name: "mentorRole")
  student   User   @relation(fields: [studentId], references: [id], name: "studentRole")

  @@map("mentorship")
}

model MentorActivity {
  id           String   @id @default(cuid())
  mentorId     String
  date         DateTime
  workingHours Int
  activities   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  mentor       User     @relation(fields: [mentorId], references: [id], name: "UserMentorActivities")

  @@map("mentoractivities")
}

enum Role {
  student
  mentor
  admin
}

enum FeedbackStatus {
  approved
  rejected
  pending
}

enum ProcessStatus {
  pending
  error
  completed
  wip
}