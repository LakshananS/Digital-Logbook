generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  email           String           @unique
  passwordHash    String
  firstName       String
  lastName        String
  emailConfirmed  Boolean          @default(false)
  role            Role
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  activities      Activity[]
  mentorFeedback  MentorFeedback[]
  mentorReports   Report[]         @relation("mentorReports")
  studentReports  Report[]         @relation("studentReports")
  mentorRoles     Mentorship[]     @relation("mentorRole")
  studentRoles    Mentorship[]     @relation("studentRole")
  mentorActivities MentorActivity[] @relation("MentorActivities") 

  @@map("users")
}

model Activity {
  id        String          @id @default(uuid())
  studentId String
  date      DateTime
  timeSpent Int
  notes     String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  student   User            @relation(fields: [studentId], references: [id])
  feedback  MentorFeedback[]

  @@map("activities")
}

model MentorFeedback {
  id            String          @id @default(uuid())
  activityId    String
  mentorId      String
  status        FeedbackStatus
  feedbackNotes String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  activity      Activity        @relation(fields: [activityId], references: [id])
  mentor        User            @relation(fields: [mentorId], references: [id])

  @@map("mentorfeedback")
}

model Report {
  id          String          @id @default(uuid())
  mentorId    String
  studentId   String?
  reportData  Json
  generatedAt DateTime        @default(now())
  mentor      User            @relation(fields: [mentorId], references: [id])
  student     User?           @relation(fields: [studentId], references: [id])

  @@map("reports")
}

model Mentorship {
  id        String          @id @default(uuid())
  mentorId  String
  studentId String
  mentor    User            @relation(fields: [mentorId], references: [id])
  student   User            @relation(fields: [studentId], references: [id])

  @@map("mentorship")
}

model MentorActivity {
  id           String   @id @default(uuid())
  mentorId     String
  date         DateTime
  workingHours Int
  activities   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  mentor       User     @relation(fields: [mentorId], references: [id], name: "MentorActivities")

  @@map("mentor_activities") 
}

enum Role {
  student
  mentor
  admin
}

enum FeedbackStatus {
  approved
  rejected
  pending
}
